name: Check AVM Compatibility with Azure Provider Versions

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm,Azure/caf-enterprise-scale/azurerm'
      azurerm_versions:
        description: 'Comma-separated list of azurerm versions to check'
        required: true
        default: '4.0.0,4.3.0'
      tf_versions:
        description: 'Comma-separated list of Terraform versions to check'
        required: true
        default: '1.9.7'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      avm_matrix: ${{ steps.set-matrix.outputs.avm_matrix }}
      azurerm_matrix: ${{ steps.set-matrix.outputs.azurerm_matrix }}
      tf_matrix: ${{ steps.set-matrix.outputs.tf_matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "avm_matrix=$(echo '${{ github.event.inputs.avm_sources }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "azurerm_matrix=$(echo '${{ github.event.inputs.azurerm_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "tf_matrix=$(echo '${{ github.event.inputs.tf_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        avm_source: ${{ fromJson(needs.prepare-matrix.outputs.avm_matrix) }}
        azurerm_version: ${{ fromJson(needs.prepare-matrix.outputs.azurerm_matrix) }}
        tf_version: ${{ fromJson(needs.prepare-matrix.outputs.tf_matrix) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf_version }}
        terraform_wrapper: false

    - name: Determine configuration type and working directory
      id: config_type
      run: |
        if [[ "${{ matrix.avm_source }}" == *"caf-enterprise-scale"* ]]; then
          echo "config_type=caf" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/caf_config" >> $GITHUB_OUTPUT
        else
          echo "config_type=normal" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/normal_config" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Terraform configuration
      run: |
        WORKING_DIR="${{ steps.config_type.outputs.working_dir }}"
        AZURERM_VERSION=$(echo "${{ matrix.azurerm_version }}" | sed 's/[\/&]/\\&/g')
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/[\/&]/\\&/g')
        sed -i "s|AZURERM_VERSION|${AZURERM_VERSION}|g" $WORKING_DIR/main.tf
        sed -i "s|AVM_SOURCE|${AVM_SOURCE}|g" $WORKING_DIR/main.tf
        echo "Contents of $WORKING_DIR/main.tf:"
        cat $WORKING_DIR/main.tf

    - name: Terraform Init
      id: tf_init
      run: |
        cd ${{ steps.config_type.outputs.working_dir }}
        terraform init -no-color 2>&1 | tee init_output.txt
        echo "init_exit_code=$?" >> $GITHUB_OUTPUT

    - name: Extract module version
      id: module_version
      run: |
        cd ${{ steps.config_type.outputs.working_dir }}
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/\//\\\//g')
        VERSION=$(sed -n "s|Downloading registry.terraform.io/$AVM_SOURCE \(.*\) for test_module...|\\1|p" init_output.txt)
        if [ -z "$VERSION" ]; then
          VERSION="Version not found"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check Compatibility
      id: check_result
      run: |
        cd ${{ steps.config_type.outputs.working_dir }}
        init_exit_code="${{ steps.tf_init.outputs.init_exit_code }}"
        
        if [ "$init_exit_code" == "0" ]; then
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "reason=Init successful" >> $GITHUB_OUTPUT
        else
          echo "result=incompatible" >> $GITHUB_OUTPUT
          if grep -q "no available releases match the given constraints" init_output.txt; then
            echo "reason=Version constraint mismatch" >> $GITHUB_OUTPUT
          else
            echo "reason=Init failed" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Extract azurerm version constraints from init output
        azurerm_constraints=$(grep -oP 'versions matching "\K[^"]*' init_output.txt | grep azurerm | paste -sd "," -)
        echo "azurerm_constraints=$azurerm_constraints" >> $GITHUB_OUTPUT

    - name: Save result
      run: |
        RESULTS_DIR="./results"
        mkdir -p "$RESULTS_DIR"
        AZURERM_CONSTRAINTS=$(echo "${{ steps.check_result.outputs.azurerm_constraints }}" | sed 's/,/ /g')
        echo "${{ matrix.avm_source }},${{ matrix.azurerm_version }},${{ matrix.tf_version }},${{ steps.check_result.outputs.result }},${{ steps.check_result.outputs.reason }},${{ steps.module_version.outputs.version }},$AZURERM_CONSTRAINTS" | tr -d '\n' >> "$RESULTS_DIR/results.csv"
        echo "" >> "$RESULTS_DIR/results.csv"  # Add a newline for readability

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results
        path: ./results/results.csv

  summarise-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: results-*
        merge-multiple: true

    - name: Debug file structure
      run: |
        echo "Current directory structure:"
        ls -R

    - name: Summarise Compatibility Results
      run: |
        echo "# Compatibility Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| AVM Source | azurerm Version | Terraform Version | Compatibility | Reason | Module Version | azurerm Constraints |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|-----------------|-------------------|---------------|--------|----------------|---------------------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -f results.csv ]; then
          # Sort the results file to ensure consistent ordering
          sort results.csv > sorted_results.csv
          
          while IFS=',' read -r avm_source azurerm_version tf_version result reason module_version azurerm_constraints; do
            # Remove any newline characters and trim whitespace
            avm_source=$(echo "$avm_source" | tr -d '\n' | xargs)
            azurerm_version=$(echo "$azurerm_version" | tr -d '\n' | xargs)
            tf_version=$(echo "$tf_version" | tr -d '\n' | xargs)
            result=$(echo "$result" | tr -d '\n' | xargs)
            reason=$(echo "$reason" | tr -d '\n' | xargs)
            module_version=$(echo "$module_version" | tr -d '\n' | xargs)
            azurerm_constraints=$(echo "$azurerm_constraints" | tr -d '\n' | xargs)
            
            echo "| $avm_source | $azurerm_version | $tf_version | $result | $reason | $module_version | $azurerm_constraints |" >> $GITHUB_STEP_SUMMARY
          done < sorted_results.csv

          # Display the contents of the results file for debugging
          echo "Contents of sorted_results.csv:"
          cat sorted_results.csv
        else
          echo "No results found. Check if results.csv file was created and uploaded correctly." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload Summary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: $GITHUB_STEP_SUMMARY
