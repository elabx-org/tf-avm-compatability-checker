name: Check AVM Compatibility with Azure Provider Versions

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm'
      azurerm_versions:
        description: 'Comma-separated list of azurerm versions to check'
        required: true
        default: '4.0.0,4.3.0'
      tf_versions:
        description: 'Comma-separated list of Terraform versions to check'
        required: true
        default: '1.5.0,1.9.7'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      avm_matrix: ${{ steps.set-matrix.outputs.avm_matrix }}
      azurerm_matrix: ${{ steps.set-matrix.outputs.azurerm_matrix }}
      tf_matrix: ${{ steps.set-matrix.outputs.tf_matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "avm_matrix=$(echo '${{ github.event.inputs.avm_sources }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "azurerm_matrix=$(echo '${{ github.event.inputs.azurerm_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "tf_matrix=$(echo '${{ github.event.inputs.tf_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        avm_source: ${{ fromJson(needs.prepare-matrix.outputs.avm_matrix) }}
        azurerm_version: ${{ fromJson(needs.prepare-matrix.outputs.azurerm_matrix) }}
        tf_version: ${{ fromJson(needs.prepare-matrix.outputs.tf_matrix) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf_version }}

    - name: Prepare Terraform configuration
      run: |
        escaped_azurerm_version=$(printf '%s\n' "${{ matrix.azurerm_version }}" | sed -e 's/[\/&]/\\&/g')
        escaped_avm_source=$(printf '%s\n' "${{ matrix.avm_source }}" | sed -e 's/[\/&]/\\&/g')
        sed -i "s|AZURERM_VERSION|${escaped_azurerm_version}|g" terraform/main.tf
        sed -i "s|AVM_SOURCE|${escaped_avm_source}|g" terraform/main.tf

    - name: Terraform Init and Check Compatibility
      id: tf_init_and_check
      run: |
        cd terraform
        terraform init -no-color > init_output.txt 2>&1
        init_exit_code=$?
        
        if [ $init_exit_code -eq 0 ]; then
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "reason=Init successful" >> $GITHUB_OUTPUT
        else
          echo "result=incompatible" >> $GITHUB_OUTPUT
          if grep -q "no available releases match the given constraints" init_output.txt; then
            echo "reason=Version constraint mismatch" >> $GITHUB_OUTPUT
          else
            echo "reason=Init failed" >> $GITHUB_OUTPUT
          fi
        fi
        
        # Extract azurerm version constraints from init output
        azurerm_constraints=$(grep -oP 'versions matching "[^"]*"' init_output.txt | grep azurerm | cut -d'"' -f2)
        echo "azurerm_constraints=$azurerm_constraints" >> $GITHUB_OUTPUT
        
        # Extract module version
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/\//\\\//g')
        MODULE_VERSION=$(sed -n "s|Downloading registry.terraform.io/$AVM_SOURCE \(.*\) for test_module...|\\1|p" init_output.txt)
        if [ -z "$MODULE_VERSION" ]; then
          MODULE_VERSION="Version not found"
        fi
        echo "module_version=$MODULE_VERSION" >> $GITHUB_OUTPUT
        
        echo "AVM: ${{ matrix.avm_source }} with azurerm ${{ matrix.azurerm_version }} and Terraform ${{ matrix.tf_version }}"
        echo "Result: ${{ steps.tf_init_and_check.outputs.result }}"
        echo "Reason: ${{ steps.tf_init_and_check.outputs.reason }}"
        echo "azurerm constraints: $azurerm_constraints"
        echo "Module version: $MODULE_VERSION"
        echo "Init exit code: $init_exit_code"

    - name: Save result
      run: |
        mkdir -p ./results
        safe_avm_source=$(echo "${{ matrix.avm_source }}" | sed 's/[^a-zA-Z0-9]/_/g')
        safe_azurerm_version=$(echo "${{ matrix.azurerm_version }}" | sed 's/[^a-zA-Z0-9]/_/g')
        safe_tf_version=$(echo "${{ matrix.tf_version }}" | sed 's/[^a-zA-Z0-9]/_/g')
        result_file="./results/${safe_avm_source}_${safe_azurerm_version}_${safe_tf_version}.txt"
        echo "${{ matrix.avm_source }}|${{ matrix.azurerm_version }}|${{ matrix.tf_version }}|${{ steps.tf_init_and_check.outputs.result }}|${{ steps.tf_init_and_check.outputs.reason }}|${{ steps.tf_init_and_check.outputs.module_version }}|${{ steps.tf_init_and_check.outputs.azurerm_constraints }}" | tr -d '\n' > "$result_file"

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ github.run_id }}-${{ strategy.job-index }}
        path: ./results

  summarize-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./all-results

    - name: List Results
      run: |
        echo "Contents of ./all-results:"
        find ./all-results -type f
        echo "Contents of result files:"
        find ./all-results -type f -name "*.txt" -exec cat {} \; -exec echo \;

    - name: Summarize Compatibility Results
      run: |
        echo "# Compatibility Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| AVM Source | azurerm Version | Terraform Version | Compatibility | Reason | Module Version | azurerm Constraints |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|-----------------|-------------------|---------------|--------|----------------|---------------------|" >> $GITHUB_STEP_SUMMARY
        
        find ./all-results -type f -name "*.txt" | sort | while read file; do
          if [ -s "$file" ]; then
            content=$(tr '\n' ' ' < "$file" | sed 's/|/|/g' | sed 's/^ *//;s/ *$//')
            IFS='|' read -r avm_source azurerm_version tf_version result reason module_version azurerm_constraints <<< "$content"
            echo "| $avm_source | $azurerm_version | $tf_version | $result | $reason | $module_version | $azurerm_constraints |" >> $GITHUB_STEP_SUMMARY
          else
            echo "Warning: Empty file found: $file" >&2
          fi
        done

    - name: Upload Summary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: $GITHUB_STEP_SUMMARY
