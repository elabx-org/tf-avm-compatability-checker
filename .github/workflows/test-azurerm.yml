name: Check AVM Compatibility with Azure Provider Versions

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm'
      azurerm_versions:
        description: 'Comma-separated list of azurerm versions to check'
        required: true
        default: '4.0.0,4.3.0'
      tf_versions:
        description: 'Comma-separated list of Terraform versions to check'
        required: true
        default: '1.5.0,1.9.7'

env:
  ARM_SKIP_PROVIDER_REGISTRATION: true

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      avm_matrix: ${{ steps.set-matrix.outputs.avm_matrix }}
      azurerm_matrix: ${{ steps.set-matrix.outputs.azurerm_matrix }}
      tf_matrix: ${{ steps.set-matrix.outputs.tf_matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "avm_matrix=$(echo '${{ github.event.inputs.avm_sources }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "azurerm_matrix=$(echo '${{ github.event.inputs.azurerm_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "tf_matrix=$(echo '${{ github.event.inputs.tf_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        avm_source: ${{ fromJson(needs.prepare-matrix.outputs.avm_matrix) }}
        azurerm_version: ${{ fromJson(needs.prepare-matrix.outputs.azurerm_matrix) }}
        tf_version: ${{ fromJson(needs.prepare-matrix.outputs.tf_matrix) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf_version }}

    - name: Prepare Terraform configuration
      run: |
        escaped_azurerm_version=$(printf '%s\n' "${{ matrix.azurerm_version }}" | sed -e 's/[\/&]/\\&/g')
        escaped_avm_source=$(printf '%s\n' "${{ matrix.avm_source }}" | sed -e 's/[\/&]/\\&/g')
        sed -i "s|AZURERM_VERSION|${escaped_azurerm_version}|g" terraform/main.tf
        sed -i "s|AVM_SOURCE|${escaped_avm_source}|g" terraform/main.tf

    - name: Terraform Init
      id: tf_init
      run: |
        cd terraform
        terraform init 2>&1 | tee init_output.txt
        echo "init_exit_code=$?" >> $GITHUB_OUTPUT

    - name: Extract module version
      id: module_version
      run: |
        VERSION=$(grep -oP 'Installed ${{ matrix.avm_source }} v\K[^ ]+' terraform/init_output.txt || echo "Version not found")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Terraform Plan
      id: tf_plan
      if: steps.tf_init.outputs.init_exit_code == '0'
      run: |
        cd terraform
        terraform plan -input=false -no-color -detailed-exitcode 2>&1 | tee plan_output.txt
        echo "plan_exit_code=$?" >> $GITHUB_OUTPUT

    - name: Check Compatibility
      id: check_result
      run: |
        init_exit_code="${{ steps.tf_init.outputs.init_exit_code }}"
        plan_exit_code="${{ steps.tf_plan.outputs.plan_exit_code }}"
        
        if [ "$init_exit_code" != "0" ]; then
          echo "result=incompatible" >> $GITHUB_OUTPUT
          echo "reason=Init failed" >> $GITHUB_OUTPUT
        elif [ "$plan_exit_code" == "1" ]; then
          echo "result=incompatible" >> $GITHUB_OUTPUT
          echo "reason=Plan error" >> $GITHUB_OUTPUT
        elif grep -q "Error: " terraform/plan_output.txt; then
          echo "result=incompatible" >> $GITHUB_OUTPUT
          echo "reason=Plan contains errors" >> $GITHUB_OUTPUT
        else
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "reason=Init and plan successful" >> $GITHUB_OUTPUT
        fi
        
        if [ "$(cat $GITHUB_OUTPUT | grep result | cut -d'=' -f2)" == "compatible" ]; then
          echo "✅ AVM: ${{ matrix.avm_source }} (version: ${{ steps.module_version.outputs.version }}) is compatible with azurerm ${{ matrix.azurerm_version }} and Terraform ${{ matrix.tf_version }}"
        else
          echo "❌ AVM: ${{ matrix.avm_source }} (version: ${{ steps.module_version.outputs.version }}) is not compatible with azurerm ${{ matrix.azurerm_version }} and Terraform ${{ matrix.tf_version }}"
        fi

    - name: Upload Terraform outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs-${{ github.run_id }}-${{ strategy.job-index }}
        path: |
          terraform/init_output.txt
          terraform/plan_output.txt

    - name: Save result
      run: |
        echo "${{ matrix.avm_source }},${{ matrix.azurerm_version }},${{ matrix.tf_version }},${{ steps.check_result.outputs.result }},${{ steps.check_result.outputs.reason }},${{ steps.module_version.outputs.version }}" >> results.csv

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ github.run_id }}-${{ strategy.job-index }}
        path: results.csv

  summarize-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: results-*
        merge-multiple: true

    - name: Summarize Compatibility Results
      run: |
        echo "# Compatibility Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| AVM Source | azurerm Version | Terraform Version | Compatibility | Reason | Module Version |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|-----------------|-------------------|---------------|--------|----------------|" >> $GITHUB_STEP_SUMMARY
        
        cat results.csv | while IFS=',' read -r avm_source azurerm_version tf_version result reason module_version; do
          echo "| $avm_source | $azurerm_version | $tf_version | $result | $reason | $module_version |" >> $GITHUB_STEP_SUMMARY
        done

    - name: Upload Summary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: $GITHUB_STEP_SUMMARY
