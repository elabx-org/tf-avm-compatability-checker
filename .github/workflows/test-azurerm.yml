name: Check AVM Compatibility with Azure Provider Versions

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm'
      azurerm_versions:
        description: 'Comma-separated list of azurerm versions to check'
        required: true
        default: '4.0.0,4.3.0'

env:
  TF_VERSION: '1.5.0'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      avm_matrix: ${{ steps.set-matrix.outputs.avm_matrix }}
      azurerm_matrix: ${{ steps.set-matrix.outputs.azurerm_matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "avm_matrix=$(echo ${{ github.event.inputs.avm_sources }} | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "azurerm_matrix=$(echo ${{ github.event.inputs.azurerm_versions }} | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        avm_source: ${{ fromJson(needs.prepare-matrix.outputs.avm_matrix) }}
        azurerm_version: ${{ fromJson(needs.prepare-matrix.outputs.azurerm_matrix) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Create Terraform configuration
      run: |
        cat << EOF > main.tf
        terraform {
          required_providers {
            azurerm = {
              source  = "hashicorp/azurerm"
              version = "${{ matrix.azurerm_version }}"
            }
          }
        }

        module "test_module" {
          source  = "${{ matrix.avm_source }}"
        }
        EOF

    - name: Terraform Init
      id: tf_init
      run: |
        terraform init 2>&1 | tee init_output.txt
        echo "init_exit_code=$?" >> $GITHUB_OUTPUT

    - name: Extract module version
      id: module_version
      run: |
        VERSION=$(grep -oP 'Installed ${{ matrix.avm_source }} v\K[^ ]+' init_output.txt || echo "Version not found")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check Terraform Init Result
      id: check_result
      run: |
        if [ "${{ steps.tf_init.outputs.init_exit_code }}" == "0" ]; then
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "✅ AVM: ${{ matrix.avm_source }} (version: ${{ steps.module_version.outputs.version }}) is compatible with azurerm ${{ matrix.azurerm_version }}"
        else
          echo "result=incompatible" >> $GITHUB_OUTPUT
          echo "❌ AVM: ${{ matrix.avm_source }} (version: ${{ steps.module_version.outputs.version }}) is not compatible with azurerm ${{ matrix.azurerm_version }}"
        fi

    - name: Upload Terraform init output
      uses: actions/upload-artifact@v4
      with:
        name: init-output-${{ github.run_id }}-${{ strategy.job-index }}
        path: init_output.txt

    - name: Save result
      run: |
        echo "${{ matrix.avm_source }},${{ matrix.azurerm_version }},${{ steps.check_result.outputs.result }},${{ steps.module_version.outputs.version }}" >> results.csv

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ github.run_id }}-${{ strategy.job-index }}
        path: results.csv

  summarize-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: results-*
        merge-multiple: true

    - name: Summarize Compatibility Results
      run: |
        echo "# Compatibility Summary" > summary.md
        echo "" >> summary.md
        echo "| AVM Source | azurerm Version | Compatibility | Module Version |" >> summary.md
        echo "|------------|-----------------|---------------|----------------|" >> summary.md
        
        cat results.csv | while IFS=',' read -r avm_source azurerm_version result module_version; do
          echo "| $avm_source | $azurerm_version | $result | $module_version |" >> summary.md
        done
        
        cat summary.md

    - name: Upload Summary
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: summary.md
