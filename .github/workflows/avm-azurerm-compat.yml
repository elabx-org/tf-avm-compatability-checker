name: Check AVM Compatibility with Azurerm

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-authorization-roleassignment/azurerm,Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm,Azure/caf-enterprise-scale/azurerm'
      azurerm_versions:
        description: 'AzureRM version to check'
        required: true
        default: '4.3.0'
      tf_versions:
        description: 'Terraform version to check'
        required: true
        default: '1.9.7'
      skip_issue_creation:
        description: 'Skip creating or updating GitHub issues'
        required: true
        default: false
        type: boolean        

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set up matrix
        id: set-matrix
        run: |
          # Process AVM sources
          IFS=',' read -ra AVM_SOURCES <<< "${{ github.event.inputs.avm_sources }}"
          
          # Initialize an empty array for the matrix
          MATRIX=()
          
          # Loop through each AVM source and create a matrix entry
          for source in "${AVM_SOURCES[@]}"; do
            short_name=$(echo "$source" | sed -E 's/Azure\/avm-res-//; s/\/azurerm//; s/Azure\///')
            MATRIX+=("{\"avm_source\":\"$source\",\"avm_short_name\":\"$short_name\",\"azurerm_version\":\"${{ github.event.inputs.azurerm_versions }}\",\"tf_version\":\"${{ github.event.inputs.tf_versions }}\"}")
          done
          
          # Join the matrix entries into a JSON array
          MATRIX_JSON="[$(IFS=,; echo "${MATRIX[*]}")]"
          
          # Create the final matrix JSON
          FINAL_MATRIX="{\"include\":$MATRIX_JSON}"
          
          # Set the matrix output
          echo "matrix=$FINAL_MATRIX" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Matrix: $FINAL_MATRIX"

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
      fail-fast: false
    name: ${{ matrix.avm_short_name }} (${{ matrix.azurerm_version }}, ${{ matrix.tf_version }})
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf_version }}
        terraform_wrapper: false

    - name: Determine configuration type and working directory
      id: config_type
      run: |
        if [[ "${{ matrix.avm_source }}" == *"caf-enterprise-scale"* ]]; then
          echo "config_type=caf" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/caf_config" >> $GITHUB_OUTPUT
        else
          echo "config_type=normal" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/normal_config" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Terraform configuration
      run: |
        WORKING_DIR="${{ steps.config_type.outputs.working_dir }}"
        AZURERM_VERSION=$(echo "${{ matrix.azurerm_version }}" | sed 's/[\/&]/\\&/g')
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/[\/&]/\\&/g')
        sed -i "s|AZURERM_VERSION|${AZURERM_VERSION}|g" $WORKING_DIR/main.tf
        sed -i "s|AVM_SOURCE|${AVM_SOURCE}|g" $WORKING_DIR/main.tf
        echo "Contents of $WORKING_DIR/main.tf:"
        cat $WORKING_DIR/main.tf

    - name: Terraform Init
      id: tf_init
      run: |
        WORKING_DIR="${{ steps.config_type.outputs.working_dir }}"
        cd "$WORKING_DIR"
        echo "Current working directory: $(pwd)"
        terraform init -no-color 2>&1 | tee init_output.txt
        exit_code=${PIPESTATUS[0]}
        if [ $exit_code -eq 1 ]; then
          echo "result=incompatible" >> $GITHUB_OUTPUT
          if grep -q "Missing required provider configuration" init_output.txt; then
            missing_providers=$(grep -oP 'with the local name "\K[^"]*' init_output.txt | sort -u | paste -sd "," -)
            echo "reason=Missing providers: $missing_providers" >> $GITHUB_OUTPUT
          else
            echo "reason=Init failed" >> $GITHUB_OUTPUT
          fi
        else
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "reason=Init successful" >> $GITHUB_OUTPUT
        fi
        echo "init_exit_code=$exit_code" >> $GITHUB_OUTPUT
        echo "working_dir=$WORKING_DIR" >> $GITHUB_OUTPUT

    - name: Check Compatibility
      id: check_result
      run: |
        WORKING_DIR="${{ steps.tf_init.outputs.working_dir }}"
        cd "$WORKING_DIR"
        echo "Current working directory: $(pwd)"
        init_exit_code="${{ steps.tf_init.outputs.init_exit_code }}"
        
        if [ "$init_exit_code" == "0" ]; then
            echo "result=compatible" >> $GITHUB_OUTPUT
            echo "reason=Init successful" >> $GITHUB_OUTPUT
            azurerm_constraints=$(grep -oP 'Finding hashicorp/azurerm versions matching "\K[^"]*' init_output.txt)
        else
            echo "result=incompatible" >> $GITHUB_OUTPUT
            if grep -q "no available releases match the given constraints" init_output.txt; then
                echo "reason=Version constraint mismatch" >> $GITHUB_OUTPUT
                azurerm_constraints=$(grep -oP 'Finding hashicorp/azurerm versions matching "\K[^"]*' init_output.txt)
            else
                echo "reason=Init failed" >> $GITHUB_OUTPUT
                azurerm_constraints="No constraints found"
            fi
        fi

        if [ -z "$azurerm_constraints" ]; then
            azurerm_constraints="No constraints found"
        fi
        echo "azurerm_constraints=$azurerm_constraints" >> $GITHUB_OUTPUT

        echo "AVM: ${{ matrix.avm_source }} with azurerm ${{ matrix.azurerm_version }} and Terraform ${{ matrix.tf_version }}"
        echo "Result: $(cat $GITHUB_OUTPUT | grep result | cut -d'=' -f2)"
        echo "Reason: $(cat $GITHUB_OUTPUT | grep reason | cut -d'=' -f2)"
        echo "azurerm constraints: $azurerm_constraints"
        echo "Init exit code: $init_exit_code"

    - name: Extract module version
      id: module_version
      run: |
        cd ${{ steps.config_type.outputs.working_dir }}
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/\//\\\//g')
        VERSION=$(sed -n "s|Downloading registry.terraform.io/$AVM_SOURCE \(.*\) for test_module...|\\1|p" init_output.txt)
        if [ -z "$VERSION" ]; then
          VERSION="Version not found"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Save result
      run: |
        AZURERM_CONSTRAINTS="${{ steps.check_result.outputs.azurerm_constraints }}"
        COMPATIBILITY="${{ steps.check_result.outputs.result }}"
        REASON="${{ steps.check_result.outputs.reason }}"
        echo "Debug: Compatibility result is $COMPATIBILITY"
        echo "Debug: Reason is $REASON"
        RESULT_LINE="${{ matrix.avm_short_name }}|${{ matrix.avm_source }}|${{ matrix.azurerm_version }}|${{ matrix.tf_version }}|$COMPATIBILITY|$REASON|${{ steps.module_version.outputs.version }}|$AZURERM_CONSTRAINTS"
        echo "Debug: Full result line is: $RESULT_LINE"
        echo "$RESULT_LINE" | tr -d '\n' >> "results-${{ strategy.job-index }}.csv"
        echo "" >> "results-${{ strategy.job-index }}.csv"  # Add a newline for readability
        echo "Debug: Contents of results-${{ strategy.job-index }}.csv:"
        cat "results-${{ strategy.job-index }}.csv"

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ strategy.job-index }}
        path: results-${{ strategy.job-index }}.csv

  summarise-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: results-*
        merge-multiple: true

    - name: Debug file structure
      run: |
        echo "Current directory structure:"
        ls -R
        echo "Contents of all result files:"
        cat results-*

    - name: Summarise Compatibility Results
      run: |
        echo "# Compatibility Summary" > summary.md
        echo "" >> summary.md
        echo "| AVM Name | AVM Source | azurerm Version | Terraform Version | Compatibility | Reason | Module Version | azurerm Constraints |" >> summary.md
        echo "|----------|------------|-----------------|-------------------|---------------|--------|----------------|---------------------|" >> summary.md
        
        # Combine all result files
        cat results-* > all_results.csv
        
        echo "Debug: Contents of all_results.csv:"
        cat all_results.csv
        
        if [ -s all_results.csv ]; then
          # Sort the combined results file
          sort all_results.csv > sorted_results.csv
          
          echo "Debug: Contents of sorted_results.csv:"
          cat sorted_results.csv
          
          while IFS='|' read -r avm_short_name avm_source azurerm_version tf_version compatibility reason module_version azurerm_constraints; do
            echo "Debug: Processing line: $avm_short_name|$avm_source|$azurerm_version|$tf_version|$compatibility|$reason|$module_version|$azurerm_constraints"

            # Preserve original formatting of azurerm_constraints
            azurerm_constraints=$(echo "$azurerm_constraints" | sed 's/^ *//; s/ *$//')

            # Create the registry URL
            registry_url="https://registry.terraform.io/modules/$avm_source"

            # Create a Markdown link for the AVM name
            avm_name_link="[$avm_short_name]($registry_url)"

            echo "Debug: After processing: $avm_name_link|$avm_source|$azurerm_version|$tf_version|$compatibility|$reason|$module_version|$azurerm_constraints"

            # Output the processed line into the summary
            echo "| $avm_name_link | $avm_source | $azurerm_version | $tf_version | $compatibility | $reason | $module_version | $azurerm_constraints |" >> summary.md
          done < sorted_results.csv

          echo "Debug: Final contents of summary.md:"
          cat summary.md
        else
          echo "No results found. Check if result files were created and uploaded correctly." >> summary.md
        fi
    
        # Output the summary to the workflow
        cat summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload Summary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: summary.md

  create-issues:
    needs: summarise-results
    if: ${{ !inputs.skip_issue_creation }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          name: compatibility-summary
  
      - name: Manage issues for AVMs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting issue management process..."
          
          # Check if summary.md exists
          if [ ! -f summary.md ]; then
            echo "Error: summary.md file not found!"
            exit 1
          fi
          
          echo "Contents of summary.md:"
          cat summary.md
          
          # Read the summary file, skipping the header lines
          tail -n +4 summary.md | while IFS= read -r line; do
            # Remove leading and trailing | and spaces
            line=$(echo "$line" | sed 's/^[ |]*//;s/[ |]*$//')
            
            # Split the line into fields
            IFS='|' read -ra fields <<< "$line"
            
            # Extract AVM name without the link
            avm_name=$(echo "${fields[0]}" | sed -E 's/\[(.*)\].*/\1/')
            avm_source=$(echo "${fields[1]}" | xargs)
            azurerm_version=$(echo "${fields[2]}" | xargs)
            tf_version=$(echo "${fields[3]}" | xargs)
            compatibility=$(echo "${fields[4]}" | xargs)
            reason=$(echo "${fields[5]}" | xargs)
            module_version=$(echo "${fields[6]}" | xargs)
            azurerm_constraints=$(echo "${fields[7]}" | xargs)
            
            echo "Processing AVM: $avm_name"
            echo "Compatibility: $compatibility"
            
            # Check for existing issue
            issue_number=$(gh issue list --search "$avm_name in:title" --json number --jq '.[0].number')
            echo "Existing issue number: $issue_number"
            
            if [ "$compatibility" == "incompatible" ]; then
              echo "AVM is incompatible. Preparing issue..."
              
              # Prepare issue title and body
              title="Incompatibility Detected: $avm_name with AzureRM $azurerm_version"
              body="An incompatibility has been detected for the following AVM:
  
          | Field | Value |
          |-------|-------|
          | AVM Name | [$avm_name](https://registry.terraform.io/modules/$avm_source) |
          | AVM Source | $avm_source |
          | AzureRM Version | $azurerm_version |
          | Terraform Version | $tf_version |
          | Compatibility | $compatibility |
          | Reason | $reason |
          | Module Version | $module_version |
          | AzureRM Constraints | $azurerm_constraints |
  
          Please investigate and update the module to ensure compatibility with AzureRM version $azurerm_version."
  
              if [ -z "$issue_number" ]; then
                echo "Creating new issue..."
                gh issue create --title "$title" --body "$body" --repo $GITHUB_REPOSITORY
                if [ $? -eq 0 ]; then
                  echo "Successfully created new issue for incompatible AVM: $avm_name"
                else
                  echo "Error: Failed to create issue for AVM: $avm_name"
                fi
              else
                echo "Updating existing issue..."
                gh issue edit $issue_number --title "$title" --body "$body"
                gh issue comment $issue_number --body "Updated compatibility check results on $(date)"
                if [ $? -eq 0 ]; then
                  echo "Successfully updated existing issue for incompatible AVM: $avm_name"
                else
                  echo "Error: Failed to update issue for AVM: $avm_name"
                fi
              fi
            elif [ "$compatibility" == "compatible" ] && [ ! -z "$issue_number" ]; then
              echo "AVM is now compatible. Closing existing issue..."
              gh issue close $issue_number --comment "AVM is now compatible with AzureRM $azurerm_version as of $(date). Closing this issue."
              if [ $? -eq 0 ]; then
                echo "Successfully closed issue for now compatible AVM: $avm_name"
              else
                echo "Error: Failed to close issue for AVM: $avm_name"
              fi
            else
              echo "No action needed for AVM: $avm_name"
            fi
            
            echo "Finished processing AVM: $avm_name"
            echo "-----------------------------------"
          done
          
          echo "Issue management process completed."

  generate-dashboard:
    needs: summarise-results
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download summary
        uses: actions/download-artifact@v4
        with:
          name: compatibility-summary

      # New Step 1: Check File Permissions
      - name: Check File Permissions
        run: |
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "File permissions for summary.md:"
          ls -l summary.md || echo "summary.md not found"
          echo "File type of summary.md:"
          file summary.md || echo "summary.md not found"
        shell: bash

      # New Step 2: Display Summary Content
      - name: Display Summary Content
        run: |
          echo "Contents of summary.md:"
          cat summary.md 2>&1 || echo "Error reading summary.md"
          echo "---End of summary.md---"
          echo "First 10 lines of summary.md:"
          head -n 10 summary.md 2>&1 || echo "Error reading summary.md"
        shell: bash    
      
      - name: Debug - List files
        run: |
          echo "Current directory contents:"
          ls -la
          echo "summary.md contents:"
          cat summary.md || echo "summary.md not found"

      - name: Generate Markdown Dashboard
        run: |
          set -e
          
          log_error() {
            echo "ERROR: $1" >&2
          }
          
          trap 'log_error "Unexpected error occurred on line $LINENO: $BASH_COMMAND"' ERR
          
          echo "Starting dashboard generation..."
          
          if [ ! -f summary.md ]; then
            log_error "summary.md file not found!"
            exit 1
          fi
          
          if [ ! -s summary.md ]; then
            echo "Warning: summary.md is empty. Generating dashboard with no data."
          fi
          
          echo "# AVM Compatibility Dashboard" > dashboard.md
          echo "" >> dashboard.md
          echo "## Summary" >> dashboard.md
          echo "" >> dashboard.md
          
          total_avms=0
          compatible_avms=0
          incompatible_avms=0
          
          echo "| AVM Name | AVM Source | AzureRM Version | Terraform Version | Compatibility | Reason | Module Version | AzureRM Constraints |" >> dashboard.md
          echo "|----------|------------|-----------------|-------------------|---------------|--------|----------------|---------------------|" >> dashboard.md
          
          echo "Processing summary.md..."
          # Use a while loop to read the file line by line
          while IFS= read -r line || [ -n "$line" ]; do
            # Skip empty lines, the table header, and the separator
            if [ -z "$line" ] || [[ $line == *"AVM Name"* ]] || [[ $line == *"----"* ]]; then
              echo "Skipping line: $line"
              continue
            fi
            
            echo "Processing line: $line"
            line=$(echo "$line" | sed 's/^[ |]*//;s/[ |]*$//')
            IFS='|' read -ra fields <<< "$line"
            
            if [ ${#fields[@]} -ne 8 ]; then
              echo "Warning: Unexpected number of fields (${#fields[@]}) in line: $line"
              continue
            fi
            
            # Trim whitespace from all fields
            avm_name=$(echo "${fields[0]}" | xargs)
            avm_source=$(echo "${fields[1]}" | xargs)
            azurerm_version=$(echo "${fields[2]}" | xargs)
            tf_version=$(echo "${fields[3]}" | xargs)
            compatibility=$(echo "${fields[4]}" | xargs | tr '[:upper:]' '[:lower:]')
            reason=$(echo "${fields[5]}" | xargs)
            module_version=$(echo "${fields[6]}" | xargs)
            azurerm_constraints=$(echo "${fields[7]}" | xargs)
            
            echo "Processed fields: $avm_name | $avm_source | $azurerm_version | $tf_version | $compatibility | $reason | $module_version | $azurerm_constraints"
            
            if [ "$compatibility" = "compatible" ]; then
              ((compatible_avms++))
              compatibility_icon="✅ Compatible"
            elif [ "$compatibility" = "incompatible" ]; then
              ((incompatible_avms++))
              compatibility_icon="❌ Incompatible"
            else
              echo "Warning: Unexpected compatibility value: $compatibility"
              compatibility_icon="⚠️ Unknown"
            fi
            ((total_avms++))
            
            echo "| [$avm_name](https://registry.terraform.io/modules/$avm_source) | $avm_source | $azurerm_version | $tf_version | $compatibility_icon | $reason | $module_version | $azurerm_constraints |" >> dashboard.md
          done < summary.md
          
          echo "Finalizing dashboard..."
          sed -i "3r /dev/stdin" dashboard.md <<EOF
          
          - Total AVMs checked: $total_avms
          - Compatible AVMs: $compatible_avms
          - Incompatible AVMs: $incompatible_avms
          
          Last updated: $(date -u)
          
          EOF
          
          if [ $total_avms -eq 0 ]; then
            echo "Warning: No AVM data was processed. The dashboard may be empty."
            echo "## No AVM Data Available" >> dashboard.md
            echo "No compatibility data was found. This could be due to an error in the compatibility check process or an empty summary file." >> dashboard.md
          fi
          
          echo "Dashboard generation complete. Contents of dashboard.md:"
          cat dashboard.md

        shell: bash

      - name: Update README.md
        run: |
          echo "Updating README.md..."
          cp dashboard.md README.md
          echo "README.md updated. Contents:"
          cat README.md
          
      - name: Commit and push if changed
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update AVM Compatibility Dashboard" && git push)
        
      - name: Debug - Final directory state
        if: always()
        run: |
          echo "Final directory contents:"
          ls -la
          echo "Git status:"
          git status