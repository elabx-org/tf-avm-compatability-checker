name: Check AVM Compatibility with Azurerm

on:
  workflow_dispatch:
    inputs:
      avm_sources:
        description: 'Comma-separated list of AVM source URLs'
        required: true
        default: 'Azure/avm-res-storage-storageaccount/azurerm,Azure/avm-res-keyvault-vault/azurerm,Azure/caf-enterprise-scale/azurerm'
      azurerm_versions:
        description: 'Comma-separated list of azurerm versions to check'
        required: true
        default: '4.0.0,4.3.0'
      tf_versions:
        description: 'Comma-separated list of Terraform versions to check'
        required: true
        default: '1.9.7'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      avm_matrix: ${{ steps.set-matrix.outputs.avm_matrix }}
      azurerm_matrix: ${{ steps.set-matrix.outputs.azurerm_matrix }}
      tf_matrix: ${{ steps.set-matrix.outputs.tf_matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "avm_matrix=$(echo '${{ github.event.inputs.avm_sources }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "azurerm_matrix=$(echo '${{ github.event.inputs.azurerm_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT
          echo "tf_matrix=$(echo '${{ github.event.inputs.tf_versions }}' | jq -R -s -c 'split(",")')" >> $GITHUB_OUTPUT

  check-compatibility:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        avm_source: ${{ fromJson(needs.prepare-matrix.outputs.avm_matrix) }}
        azurerm_version: ${{ fromJson(needs.prepare-matrix.outputs.azurerm_matrix) }}
        tf_version: ${{ fromJson(needs.prepare-matrix.outputs.tf_matrix) }}
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ matrix.tf_version }}
        terraform_wrapper: false

    - name: Determine configuration type and working directory
      id: config_type
      run: |
        if [[ "${{ matrix.avm_source }}" == *"caf-enterprise-scale"* ]]; then
          echo "config_type=caf" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/caf_config" >> $GITHUB_OUTPUT
        else
          echo "config_type=normal" >> $GITHUB_OUTPUT
          echo "working_dir=terraform/normal_config" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Terraform configuration
      run: |
        WORKING_DIR="${{ steps.config_type.outputs.working_dir }}"
        AZURERM_VERSION=$(echo "${{ matrix.azurerm_version }}" | sed 's/[\/&]/\\&/g')
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/[\/&]/\\&/g')
        sed -i "s|AZURERM_VERSION|${AZURERM_VERSION}|g" $WORKING_DIR/main.tf
        sed -i "s|AVM_SOURCE|${AVM_SOURCE}|g" $WORKING_DIR/main.tf
        echo "Contents of $WORKING_DIR/main.tf:"
        cat $WORKING_DIR/main.tf

    - name: Terraform Init
      id: tf_init
      run: |
        WORKING_DIR="${{ steps.config_type.outputs.working_dir }}"
        cd "$WORKING_DIR"
        echo "Current working directory: $(pwd)"
        terraform init -no-color 2>&1 | tee init_output.txt
        exit_code=${PIPESTATUS[0]}
        if [ $exit_code -eq 1 ]; then
          echo "result=incompatible" >> $GITHUB_OUTPUT
          if grep -q "Missing required provider configuration" init_output.txt; then
            missing_providers=$(grep -oP 'with the local name "\K[^"]*' init_output.txt | sort -u | paste -sd "," -)
            echo "reason=Missing providers: $missing_providers" >> $GITHUB_OUTPUT
          else
            echo "reason=Init failed" >> $GITHUB_OUTPUT
          fi
        else
          echo "result=compatible" >> $GITHUB_OUTPUT
          echo "reason=Init successful" >> $GITHUB_OUTPUT
        fi
        echo "init_exit_code=$exit_code" >> $GITHUB_OUTPUT
        echo "working_dir=$WORKING_DIR" >> $GITHUB_OUTPUT

    - name: Check Compatibility
      id: check_result
      run: |
        WORKING_DIR="${{ steps.tf_init.outputs.working_dir }}"
        cd "$WORKING_DIR"
        echo "Current working directory: $(pwd)"
        init_exit_code="${{ steps.tf_init.outputs.init_exit_code }}"
        
        if [ "$init_exit_code" == "0" ]; then
            echo "result=compatible" >> $GITHUB_OUTPUT
            echo "reason=Init successful" >> $GITHUB_OUTPUT
            # Extract azurerm version constraints for successful init, preserving commas and spaces
            azurerm_constraints=$(grep -oP 'Finding hashicorp/azurerm versions matching "\K[^"]*' init_output.txt)
        else
            echo "result=incompatible" >> $GITHUB_OUTPUT
            if grep -q "no available releases match the given constraints" init_output.txt; then
                echo "reason=Version constraint mismatch" >> $GITHUB_OUTPUT
                # Extract azurerm version constraints for failed init due to version mismatch
                azurerm_constraints=$(awk '/no available releases match the given constraints/{print $NF; getline; print $0}' init_output.txt | tr '\n' ' ')
            else
                echo "reason=Init failed" >> $GITHUB_OUTPUT
                azurerm_constraints="No constraints found"
            fi
        fi

        if [ -z "$azurerm_constraints" ]; then
            azurerm_constraints="No constraints found"
        fi
        echo "azurerm_constraints=$azurerm_constraints" >> $GITHUB_OUTPUT

        
        echo "AVM: ${{ matrix.avm_source }} with azurerm ${{ matrix.azurerm_version }} and Terraform ${{ matrix.tf_version }}"
        echo "Result: $(cat $GITHUB_OUTPUT | grep result | cut -d'=' -f2)"
        echo "Reason: $(cat $GITHUB_OUTPUT | grep reason | cut -d'=' -f2)"
        echo "azurerm constraints: $azurerm_constraints"
        echo "Init exit code: $init_exit_code"

    - name: Extract module version
      id: module_version
      run: |
        cd ${{ steps.config_type.outputs.working_dir }}
        AVM_SOURCE=$(echo "${{ matrix.avm_source }}" | sed 's/\//\\\//g')
        VERSION=$(sed -n "s|Downloading registry.terraform.io/$AVM_SOURCE \(.*\) for test_module...|\\1|p" init_output.txt)
        if [ -z "$VERSION" ]; then
          VERSION="Version not found"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Save result
      run: |
        AZURERM_CONSTRAINTS=$(echo "${{ steps.check_result.outputs.azurerm_constraints }}" | sed 's/,/ /g')
        COMPATIBILITY="${{ steps.check_result.outputs.result }}"
        REASON="${{ steps.check_result.outputs.reason }}"
        echo "Debug: Compatibility result is $COMPATIBILITY"
        echo "Debug: Reason is $REASON"
        RESULT_LINE="${{ matrix.avm_source }},${{ matrix.azurerm_version }},${{ matrix.tf_version }},$COMPATIBILITY,$REASON,${{ steps.module_version.outputs.version }},$AZURERM_CONSTRAINTS"
        echo "Debug: Full result line is: $RESULT_LINE"
        echo "$RESULT_LINE" | tr -d '\n' >> "results-${{ strategy.job-index }}.csv"
        echo "" >> "results-${{ strategy.job-index }}.csv"  # Add a newline for readability
        echo "Debug: Contents of results-${{ strategy.job-index }}.csv:"
        cat "results-${{ strategy.job-index }}.csv"

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: results-${{ strategy.job-index }}
        path: results-${{ strategy.job-index }}.csv

  summarise-results:
    needs: check-compatibility
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: results-*
        merge-multiple: true

    - name: Debug file structure
      run: |
        echo "Current directory structure:"
        ls -R
        echo "Contents of all result files:"
        cat results-*

    - name: Summarise Compatibility Results
      run: |
        echo "# Compatibility Summary" > summary.md
        echo "" >> summary.md
        echo "| AVM Source | azurerm Version | Terraform Version | Compatibility | Reason | Module Version | azurerm Constraints |" >> summary.md
        echo "|------------|-----------------|-------------------|---------------|--------|----------------|---------------------|" >> summary.md
        
        # Combine all result files
        cat results-* > all_results.csv
        
        echo "Debug: Contents of all_results.csv:"
        cat all_results.csv
        
        if [ -s all_results.csv ]; then
          # Sort the combined results file
          sort all_results.csv > sorted_results.csv
          
          echo "Debug: Contents of sorted_results.csv:"
          cat sorted_results.csv
          
          while IFS=',' read -r avm_source azurerm_version tf_version compatibility reason module_version azurerm_constraints; do
            echo "Debug: Processing line: $avm_source,$azurerm_version,$tf_version,$compatibility,$reason,$module_version,$azurerm_constraints"

            # Remove newlines and trim extra spaces for azurerm_constraints
            azurerm_constraints=$(echo "$azurerm_constraints" | tr -s '[:space:]' | sed -E 's/([0-9\.]+) ([<>]=?|~>) /\1, \2 /g' | sed -E 's/ ([0-9\.]+),/\1,/g')



            echo "Debug: After processing: $avm_source,$azurerm_version,$tf_version,$compatibility,$reason,$module_version,$azurerm_constraints"

            # Output the processed line into the summary
            echo "| $avm_source | $azurerm_version | $tf_version | $compatibility | $reason | $module_version | $azurerm_constraints |" >> summary.md
          done < sorted_results.csv

    
          echo "Debug: Final contents of summary.md:"
          cat summary.md
        else
          echo "No results found. Check if result files were created and uploaded correctly." >> summary.md
        fi
    
        # Output the summary to the workflow
        cat summary.md >> $GITHUB_STEP_SUMMARY
      

    - name: Upload Summary as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: compatibility-summary
        path: summary.md
